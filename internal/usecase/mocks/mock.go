// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/bllooop/pvzservice/internal/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
	isgomock struct{}
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(userId uuid.UUID, userRole int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId, userRole)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(userId, userRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), userId, userRole)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(accessToken string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accessToken)
}

// SignUser mocks base method.
func (m *MockAuthorization) SignUser(email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUser", email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUser indicates an expected call of SignUser.
func (mr *MockAuthorizationMockRecorder) SignUser(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUser", reflect.TypeOf((*MockAuthorization)(nil).SignUser), email, password)
}

// MockPvz is a mock of Pvz interface.
type MockPvz struct {
	ctrl     *gomock.Controller
	recorder *MockPvzMockRecorder
	isgomock struct{}
}

// MockPvzMockRecorder is the mock recorder for MockPvz.
type MockPvzMockRecorder struct {
	mock *MockPvz
}

// NewMockPvz creates a new mock instance.
func NewMockPvz(ctrl *gomock.Controller) *MockPvz {
	mock := &MockPvz{ctrl: ctrl}
	mock.recorder = &MockPvzMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvz) EXPECT() *MockPvzMockRecorder {
	return m.recorder
}

// AddProdToRecep mocks base method.
func (m *MockPvz) AddProdToRecep(product domain.Product) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProdToRecep", product)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProdToRecep indicates an expected call of AddProdToRecep.
func (mr *MockPvzMockRecorder) AddProdToRecep(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProdToRecep", reflect.TypeOf((*MockPvz)(nil).AddProdToRecep), product)
}

// CloseReception mocks base method.
func (m *MockPvz) CloseReception(closeRec uuid.UUID) (domain.ProductReception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", closeRec)
	ret0, _ := ret[0].(domain.ProductReception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockPvzMockRecorder) CloseReception(closeRec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockPvz)(nil).CloseReception), closeRec)
}

// CreatePvz mocks base method.
func (m *MockPvz) CreatePvz(pvz domain.PVZ) (domain.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", pvz)
	ret0, _ := ret[0].(domain.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockPvzMockRecorder) CreatePvz(pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*MockPvz)(nil).CreatePvz), pvz)
}

// CreateRecep mocks base method.
func (m *MockPvz) CreateRecep(recep domain.ProductReception) (domain.ProductReception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecep", recep)
	ret0, _ := ret[0].(domain.ProductReception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecep indicates an expected call of CreateRecep.
func (mr *MockPvzMockRecorder) CreateRecep(recep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecep", reflect.TypeOf((*MockPvz)(nil).CreateRecep), recep)
}

// DeleteLastProduct mocks base method.
func (m *MockPvz) DeleteLastProduct(delProd uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", delProd)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockPvzMockRecorder) DeleteLastProduct(delProd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockPvz)(nil).DeleteLastProduct), delProd)
}

// GetListOFpvz mocks base method.
func (m *MockPvz) GetListOFpvz(ctx context.Context) ([]domain.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOFpvz", ctx)
	ret0, _ := ret[0].([]domain.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOFpvz indicates an expected call of GetListOFpvz.
func (mr *MockPvzMockRecorder) GetListOFpvz(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOFpvz", reflect.TypeOf((*MockPvz)(nil).GetListOFpvz), ctx)
}

// GetPvz mocks base method.
func (m *MockPvz) GetPvz(input domain.GettingPvzParams) ([]domain.PvzSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvz", input)
	ret0, _ := ret[0].([]domain.PvzSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockPvzMockRecorder) GetPvz(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockPvz)(nil).GetPvz), input)
}
